{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */


/**
 * This is the image with text paragraph.
 *
 * Contains 3 different layouts: image on the left-hand-side, right-hand-side, image as background
 *
 * If the image is being used as with the first two layout options mentioned above, users can also update the image orientation: horizontal vs. vertical
 *
 * Images are rendered with Drupal image styles:
 *
 * Small (960x640),
 * Image with Text (584x389),
 * Image with Text Vertical (285x390)
 *
 * Update them as you see fit for your own project.
 */

#}
{% set imgAlign = paragraph.field_img_txt_align.value %}
{% set featImg = paragraph.field_img_txt_images %}
{% set title = paragraph.field_img_txt_title.value %}
{% set body = paragraph.field_img_txt_body.value %}
{% set links = paragraph.field_img_txt_links %}

{% if paragraph.field_img_txt_img_ori.value %}
  {% set imgRender = paragraph.field_img_txt_img_ori.value | lower %}
{% endif %}

{% block paragraph %}
  {% block content %}

    {%
      set classes = [
        'paragraph',
        'paragraph--type--' ~ paragraph.bundle|clean_class,
        view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
        not paragraph.isPublished() ? 'paragraph--unpublished',
        'default-margins__top-bot'
      ]
    %}
    <div{{ attributes.addClass(classes) }}>

      {% if featImg | length > 1 %}
        <div class="swiper-pagination img-text"></div>
      {% endif %}

      <div class="para-img-txt {{ imgAlign }}">
        {% if featImg.entity.field_media_image.entity.uri.value and featImg | length == 1 %}
          {% set imgUri = featImg.entity.field_media_image.entity.uri.value %}
          <div class="para-img-txt__img-container {{ (imgRender) ?? imgRender }}">
            {% if imgRender == 'vertical' %}
              <img
                class="para-img-txt__img {{ (imgRender) ?? imgRender }}"
                src="{{ imgUri | image_style('image_with_text_vertical') }}"
                alt="{{ featImg.value.0.alt }}"
                width="555"
                height="370"
              />
            {% else %}
              <img
                class="para-img-txt__img"
                src="{{ imgUri | image_style('image_with_text') }}"
                alt="{{ featImg.value.0.alt }}"
                width="555"
                height="370"
              />
            {% endif %}
          </div>
        {% else %}

          <div class="swiper para-img-txt__swiper">
            <div class="para-img-txt__wrapper">
              {% for image in featImg %}
                {% set imgUri = image.entity.field_media_image.entity.uri.value %}

                {% if imgUri %}
                  <div class="para-img-txt__slide">
                    <img
                      class="para-img-txt__img"
                      src="{{ imgUri | image_style('image_with_text_carousel') }}"
                      alt="{{ image.entity.field_media_image.alt }}"
                      width="555"
                      height="370"
                    />
                  </div>
                {% endif %}
              {% endfor %}
            </div>
          </div>


        {% endif %}

        <div class="para-img-txt__body-container">
          {% if title %}
            <h2 class="para-img-txt__body-title">{{ title }}</h2>
          {% endif %}
          {% if body %}
            {{ body | raw }}
          {% endif %}

          <div class="para-img-txt__links">
            {% for link in links %}
              {% if link.uri and link.title %}
                {{ link(link.title, link.uri) }}
              {% endif %}
            {% endfor %}
          </div>
        </div>

      </div>

      {% if featImg | length > 1 %}
        <div class="slick-custom-arrows">
          <button class="slick-prev img-txt-slick-custom-prev" aria-label="Previous" type="button" aria-disabled="true">Previous</button>
          <button class="slick-next img-txt-slick-custom-next" aria-label="Next" type="button" aria-disabled="true">Next</button>
        </div>
        <div class="slick-custom-dots"></div>
      {% endif %}
    </div>

  {% endblock %}
{% endblock paragraph %}
