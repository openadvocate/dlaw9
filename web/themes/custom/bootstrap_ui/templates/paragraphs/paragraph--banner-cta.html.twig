{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set title = paragraph.field_banner_title.value %}
{% set subtitle = paragraph.field_banner_subtitle.value %}
{% set body = content.field_banner_body %}
{% set buttons = paragraph.field_banner_button %}
{% set layout = paragraph.field_banner_layout_option.value %}
{% set polkaDots = paragraph.field_polka_dot_option.value %}
{% if  not layout %}
  {% set layout = '' %}
{% endif %}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'banner__cta',
    'tw-flex-1',
    'banner__cta-'~layout,
    polkaDots ? 'polka__dots',
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}

      {% if layout == 'center' %}

        <div class="banner__center-container">
          {% if subtitle %}
            <p class="banner__center-subtitle">{{ subtitle }}</p>
          {% endif %}
          <p class="banner__center-title">{{title}}</p>
          {{body}}

          {% for button in buttons %}
            {% if button.uri and button.title %}
              {{ link(button.title, button.uri,  { 'class':['default__btn']} ) }}
            {% endif %}
          {% endfor %}

        </div>


      {% else %}

        <div class="banner__cta-container">
          <div class="banner__cta-lhs">
            <h3>{{title}}</h3>
            {{body}}
          </div>

          <div class="banner__cta-rhs">
            {% for button in buttons %}
              {% if button.uri and button.title %}
                {{ link(button.title, button.uri, {'class': ['default__btn']}) }}
              {% endif %}
            {% endfor %}
          </div>
        </div>

      {% endif %}

    {% endblock %}
  </div>
{% endblock paragraph %}
